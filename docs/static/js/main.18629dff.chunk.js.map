{"version":3,"sources":["components/AppHeader/index.jsx","components/AppFooter/index.jsx","components/NRACalculator/calculations.js","components/Map/index.js","components/ZonePicker/index.js","components/NRACalculator/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["AppHeader","render","className","props","children","React","Component","AppFooter","calculateTaxes","amount","millRate","getNRAEstimates","startingValue","estValueAfterImprovements","zone","getZoneData","millRateHigh","millRateLow","millRateAvg","incentiveYears","estHigh","calculateRebate","estLow","estAverage","currentTaxes","fivePercentImprovements","newTaxes","incrementalTaxSavings","payPerYear","savePerYear","savings","position","Map","test","input","console","log","style","width","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","url","Marker","onClick","setZoneFromMap","Popup","open","modalStyle","textAlign","marginBottom","ZonePicker","Modal","trigger","Button","fluid","size","Header","Content","image","this","cleanNumber","num","cleanNum","toString","replace","parseInt","Math","floor","formatNumber","toFixed","NRACalculator","handleCurrent","e","setState","current","target","value","handleImprovements","afterImprovements","handleZone","Grid","GridColumn","state","estimates","Message","color","Form","Segment","stacked","Input","label","labelPosition","placeholder","onChange","Label","undefined","handleSubmit","basic","bind","warn","App","href","Boolean","window","location","hostname","match","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18629dff.chunk.js","sourcesContent":["import React from 'react';\nimport './AppHeader.scss';\n\nclass AppHeader extends React.Component {\n  render = () => {\n    return (\n      <header className=\"AppHeader\">\n        <h1>{this.props.children}</h1>\n      </header>\n    );\n  }\n}\n\nexport default AppHeader;\n","import React from 'react';\nimport './AppFooter.scss';\n\nclass AppFooter extends React.Component {\n  render = () => {\n    return (\n      <footer className=\"AppFooter\">\n        <p>{this.props.children}</p>\n      </footer>\n    );\n  }\n}\n\nexport default AppFooter;\n","// State-wide constant value\nconst assessmentPercentage = 0.115;\n\nexport const calculateTaxes = (amount, millRate) => {\n    return ((amount / 1000) * millRate) - 44;\n}\n\nexport const getNRAEstimates = (startingValue, estValueAfterImprovements, zone) => {\n\n    const { millRateHigh, millRateLow, millRateAvg, incentiveYears } = getZoneData(zone);\n\n    // Calculate based on high, low, and average mill rate within given zone\n    // Eventually we hope to create a more granular estimate based on address,\n    // but as a first pass, this removes a lot of complexity\n    const estHigh = calculateRebate(startingValue, estValueAfterImprovements, millRateHigh, incentiveYears);\n    const estLow = calculateRebate(startingValue, estValueAfterImprovements, millRateLow, incentiveYears);\n    const estAverage = calculateRebate(startingValue, estValueAfterImprovements, millRateAvg, incentiveYears);\n\n    return {\n        estHigh,\n        estLow,\n        estAverage,\n    };\n\n}\n\nexport const getZoneData = (zone) => {\n    // TODO: Get real zone/mill rate data\n    return {\n        millRateHigh: 100,\n        millRateLow: 80,\n        millRateAvg: 90,\n        incentiveYears: 10\n    }\n};\n\n// Calculate NRA tax incentive\nexport const calculateRebate = (startingValue, estValueAfterImprovements, millRate, incentiveYears) => {\n\n    // Calculate current taxes\n    const currentAssessedValue = startingValue * assessmentPercentage;\n    const currentTaxes = calculateTaxes(currentAssessedValue, millRate);\n\n    // Calculate new taxes\n    const fivePercentImprovements = (estValueAfterImprovements - startingValue) * 0.05;\n    const newTaxableAmount = startingValue + fivePercentImprovements;\n    const newTaxableAmountAssessed = newTaxableAmount * assessmentPercentage;\n    const newTaxes = calculateTaxes(newTaxableAmountAssessed, millRate);\n\n    // Calculate incremental tax values\n    const incrementalAppraisedValue = estValueAfterImprovements - fivePercentImprovements;\n    const incrementalAssessedValue = incrementalAppraisedValue * assessmentPercentage;\n    const incrementalTaxSavings = (incrementalAssessedValue / 1000) * millRate;\n\n    // Calculate payments/savings per year\n    const payPerYear = newTaxes;\n    const savePerYear = incrementalTaxSavings;\n\n    // Total savings\n    const savings = savePerYear * incentiveYears;\n    \n    // Several values that might be useful to display\n    return {\n        currentTaxes,\n        newTaxes,\n        incrementalTaxSavings,\n        payPerYear,\n        savePerYear,\n        savings\n    }\n\n}\n","import React from 'react'\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\n\nconst position = [39.1155, -94.6268];\n\nclass Map extends React.Component {\n\n  test = (input) => {\n      console.log(input);\n  }\n\n  render = () => {\n    return (\n      <LeafletMap\n        style={{ width: '100%' }}\n        center={position}\n        zoom={12}\n        maxZoom={16}\n        attributionControl={true}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.2}\n      >\n        <TileLayer url='http://{s}.tile.osm.org/{z}/{x}/{y}.png' />\n        {/* setZoneFromMap sets the zone in the NRACalculator component */}\n        <Marker position={position} onClick={this.props.setZoneFromMap}>\n          <Popup open>Successfully set your zone to 1</Popup>\n        </Marker>\n      </LeafletMap>\n    );\n  }\n}\n\nexport default Map","import React from 'react'\nimport { Button, Modal } from 'semantic-ui-react'\nimport Map from '../Map'\n\nconst modalStyle = {\n    textAlign: 'center',\n    marginBottom: '1em'\n}\n\n//popup modal containing Leaflet.js map\n\nclass ZonePicker extends React.Component {\n    render() {\n        return(\n            <div style={modalStyle}>\n                <Modal trigger={<Button fluid size='large'>Select Your Zone</Button>}>\n                    <Modal.Header>Select Your Zone</Modal.Header>\n                    <Modal.Content image>\n                        <Map setZoneFromMap={this.props.setZoneFromMap}/>\n                    </Modal.Content>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default ZonePicker;\n","import React from 'react';\nimport './NRACalculator.scss';\n//import for Semantic-UI components\nimport { Button, Form, Grid, Segment, GridColumn, Label, Message } from 'semantic-ui-react'\nimport { getNRAEstimates } from './calculations';\nimport ZonePicker from '../ZonePicker';\n\nclass NRACalculator extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      current: \"\",\n      afterImprovements: \"\",\n      zone: \"\",\n      estimates: \"\"\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleCurrent = e => {\n    this.setState({\n      current: cleanNumber(e.target.value),\n    })\n  }\n\n  handleImprovements = e => {\n    this.setState({\n      afterImprovements: cleanNumber(e.target.value),\n    })\n  }\n\n  handleZone = e => {\n    this.setState({\n      zone: cleanNumber(e.target.value),\n    })\n  }\n\n  setZoneFromMap = e => {\n      this.setState({ zone: 1 });\n  }\n\n  // Will pass input values from state to backend as object\n  handleSubmit() {\n    if (this.state.current && this.state.afterImprovements && this.state.zone) {\n      this.setState({\n        estimates: getNRAEstimates(this.state.current, this.state.afterImprovements, this.state.zone)\n      });\n      console.warn('ZONE/MILL RATE DATA IS MOCKED. THESE VALUES ARE NOT ACCURATE.')\n      console.log(this.state.estimates);\n    }\n  }\n\n  render = () => {\n    return (\n      <Grid textAlign='left' className=\"NRACalculator\">\n        <GridColumn>\n          { this.state.estimates &&\n            <Message color=\"yellow\" style={{ textAlign: 'center' }}>\n              <p>Note: These estimates use fake mill rates, and are not yet accurate approximations.</p>\n            </Message>}\n          <Form size='large'>\n            <Segment stacked>\n\n              {/** Current valuation form input **/}\n              <Form.Input\n                label=\"Current Value\"\n                labelPosition=\"left\"\n                placeholder='Current Value'\n                onChange={this.handleCurrent}\n              >\n                <Label>$</Label>\n                <input />\n              </Form.Input>\n\n              {/** Est. value after improvements form input **/}\n              <Form.Input\n                label=\"Est. Value After Improvements\"\n                labelPosition=\"left\"\n                placeholder='Est. Value After Improvements'\n                onChange={this.handleImprovements}\n              >\n                <Label>$</Label>\n                <input />\n              </Form.Input>\n\n              {/** Zone form input **/}\n              <Form.Input\n                label=\"Zone\"\n                placeholder='Zone'\n                value={this.state.zone ? this.state.zone : undefined}\n                onChange={this.handleZone}\n              />\n\n              <ZonePicker setZoneFromMap={this.setZoneFromMap} />\n\n              {/** Submit button **/}\n              <Button color='blue'\n                fluid size='large'\n                onClick={this.handleSubmit}\n              >\n                Calculate Rebate\n              </Button>\n\n              { this.state.estimates && <Segment basic textAlign=\"center\">\n                <p>These estimates provide a range depending on the mill rate, which vary within each zone.</p>\n                <p><b>Pay Per Year:</b> ${\n                  formatNumber(this.state.estimates.estLow.payPerYear)\n                  } - ${\n                    formatNumber(this.state.estimates.estHigh.payPerYear)\n                  }</p>\n                <p><b>Savings Per Year:</b> ${\n                  formatNumber(this.state.estimates.estLow.savePerYear)\n                  } - ${\n                    formatNumber(this.state.estimates.estHigh.savePerYear)\n                  }</p>\n                <p><b>10 Year Savings:</b> ${\n                    formatNumber(this.state.estimates.estLow.savings)\n                  } - ${\n                    formatNumber(this.state.estimates.estHigh.savings)\n                  }</p>\n              </Segment>}\n\n            </Segment>\n          </Form>\n        </GridColumn>\n      </Grid>\n    )\n  }\n}\n\nfunction cleanNumber(num) {\n  // Remove $ and , symbols for calculation\n  const cleanNum = num.toString().replace(/,*\\$*/g, '');\n  return parseInt(Math.floor(cleanNum));\n}\n\nfunction formatNumber(num) {\n  // This will limit to 2 decimals and add commas to thousands\n  return num.toFixed(2).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\n\nexport default NRACalculator;\n","import React from 'react';\nimport AppHeader from './components/AppHeader';\nimport './App.scss';\nimport AppFooter from './components/AppFooter';\nimport NRACalculator from './components/NRACalculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppHeader>NRA Calculator</AppHeader>\n      <p>\n        The Neighborhood Revitalization Act (NRA) is an effort by the Unified Government of Wyandotte County and \n        Kansas City, Kansas to promote revitalization, conservation, and redevelopment of designated areas through\n        tax rebate incentives on new construction and improvements. Please begin below to calculate\n        the potential tax benefits for development of a given property.\n      </p>\n      <NRACalculator></NRACalculator>\n      <AppFooter>\n        Created in partnership with <a href=\"https://codeforkc.org\">Code for KC</a><br />\n        Contribute code on <a href=\"https://github.com/codeforkansascity/nra_calc\">Github</a>\n      </AppFooter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-snapshot';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}